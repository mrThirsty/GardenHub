@page "/plants"
@using GardenHub.Shared.Model
@using GardenHub.Web.Helpers
@using GardenHub.Web.Services.Data

@inject IPlantService _plantService
@inject IDialogService _dialogService

<PageTitle>Plants</PageTitle>

<MudDataGrid T="Plant" MultiSelection="true" Items="@_plants" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Plants</MudText>
    
        <MudToolBar>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddItem"/>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="EditItem" Disabled="!CanEdit"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="DeleteItem" Disabled="!CanDelete"/>
            <MudIconButton Icon="@Icons.Material.Filled.Grass" Color="Color.Secondary" OnClick="AddPot" Disabled="!CanEdit"/>
        </MudToolBar>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Plant" />
        <Column T="Plant" Field="PlantName" Title="Name" />
        <Column T="Plant" Field="RequiredSoilMoisture" Title="Soil Moisture Requirement"/>
        <Column T="Plant" Field="RequiredSun" Title="Sun Requirement">
            <CellTemplate>
                @context.Item.RequiredSun.GetFriendlyEnum()
            </CellTemplate>
        </Column>
        <Column T="Plant" Field="Description" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Plant" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<Plant> _plants = default!;
    private string _searchString = default!;
    private HashSet<Plant> _selectedItems = new HashSet<Plant>();
    private bool CanEdit => _selectedItems.Count == 1;
    private bool CanDelete => _selectedItems.Count > 0;
    
    protected override async Task OnInitializedAsync()
    {
       _plants = await _plantService.Get();
    }
    
    private Func<Plant, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.PlantName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task AddItem()
    {
        IDialogReference dialog = _dialogService.Show<Dialogs.PlantForm>("Create Plant", new DialogOptions() { DisableBackdropClick = true, MaxWidth = MaxWidth.Medium, FullWidth = true});

        DialogResult result = await dialog.Result;

        if (!result.Cancelled)
        {
            _plants = await _plantService.Get();
        }
    }
    
    private async Task EditItem()
    {
        DialogParameters parameters = new DialogParameters();
        parameters.Add("IsEdit", true);
        parameters.Add("Item", _selectedItems.First());
        
        IDialogReference dialog = _dialogService.Show<Dialogs.PlantForm>("Edit Plant", parameters, new DialogOptions() { DisableBackdropClick = true });
        DialogResult result = await dialog.Result;

        if (!result.Cancelled)
        {
            _plants = await _plantService.Get();
        }
    }

    private async Task DeleteItem()
    {
        foreach (Plant item in _selectedItems)
        {
            await _plantService.Delete(item.Id);
        }

        _plants = await _plantService.Get();
    }

    private async Task AddPot()
    {
        DialogParameters parameters = new DialogParameters();
        parameters.Add("Plant",_selectedItems.First());

        _dialogService.Show<Dialogs.PotForm>(title: $"Add pot for {_selectedItems.First().PlantName}", parameters, new DialogOptions() { DisableBackdropClick = true });
    }

    private void RowClicked(DataGridRowClickEventArgs<Plant> args)
    {
       // _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    private void SelectedItemsChanged(HashSet<Plant> items)
    {
        _selectedItems = items;
    }
}
